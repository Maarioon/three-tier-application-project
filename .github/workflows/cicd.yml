name: Deploy to EC2
on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          submodules: true
          lfs: true
      
      - name: Comprehensive Network Diagnostics
        run: |
          echo "Checking network interfaces..."
          ip addr
          
          echo "Checking DNS settings..."
          cat /etc/resolv.conf
          
          echo "Testing connectivity to GitHub..."
          curl -Is https://github.com | head -n 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node --input-type=module .github/workflows/generate-release-note.js | tee release-notes.md
      
      - name: Upload Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
      
      - name: Prepare SSH Connection
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo SSH connection successful'
      
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/myapp"
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            if ! command -v git &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y git
            fi
            
            if ! command -v docker &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y docker.io docker-compose
            fi
            
            if [ -d ".git" ]; then
              git pull origin main
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            docker compose down || echo "No containers to stop"
            docker compose up -d --build
          EOF

  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.host.url=https://sonarcloud.io
