name: Deploy to EC2
on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history for PR detection

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install @octokit/rest

      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Execute the ES module script with Node
          node --input-type=module .github/workflows/generate-release-note.js | tee release-notes.md
          
      - name: Upload Release Notes as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

      # Debug: Check internet connectivity
      - name: Check Internet Connectivity
        run: |
          ping -c 4 google.com || echo "Ping failed"
          curl -Is https://github.com || echo "GitHub unreachable"
          nslookup github.com || echo "DNS resolution failed"

      # Fix DNS resolution issue
      - name: Fix DNS Configuration
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null

      # Ensure network is stable
      - name: Wait for Network to Stabilize
        run: sleep 10

      # Check if hostname is resolvable
      - name: Test Hostname Resolution
        run: nslookup ${{ secrets.EC2_HOST }} || echo "Hostname resolution failed"

      # Setup SSH directory
      - name: Setup SSH Directory
        run: mkdir -p ~/.ssh

      # Deploy or Run Commands (example SSH)
      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "echo 'Connected successfully!'"
      
          
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          
      - name: Deploy to EC2
        run: |
          ssh -F ~/.ssh/config ec2-deployment << 'EOF'
            # Create application directory
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/myapp"
            mkdir -p $APP_DIR
            cd $APP_DIR
            
            # Verify git and docker are installed
            if ! command -v git &> /dev/null; then
              echo "Git is not installed. Installing..."
              sudo apt-get update
              sudo apt-get install -y git
            fi
            
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
            fi
            
            # Clone or update repository
            if [ -d ".git" ]; then
              echo "Updating existing repository..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Deployment with error handling
            echo "Starting application with Docker Compose..."
            docker compose down || echo "No existing containers to stop"
            docker compose up -d --build || { 
              echo "Docker Compose deployment failed"; 
              docker compose logs;
              exit 1; 
            }
          EOF

  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=SONAR_TOKEN
            -Dsonar.organization=three-tier-application-project
            -Dsonar.host.url=https://sonarcloud.io/summary/new_code?id=Maarioon_three-tier-application-project&branch=main
